using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using SPACEOBJ;
using Tao.OpenGl;
using Tao.Platform.Windows;
using System.Xml;
using System.Drawing.Imaging;

namespace WINHOVED
{
    public partial class WinHoved : Form
    {
        public const String XMLFILE = "Planets.xml";

        // Define some constants
        const int SIDE = 0;
        const int TOP = 1;
        const int PERSP = 2;
        const int INITIAL_X = 0;
        const int INITIAL_Y = 0;
        const int INITIAL_Z = 0;
        const double INITIAL_ZOOM = 1.0;
        const int FRAMERATE = 25;
        const int PAN_STEP = 10000;

        // Initialize the datastructures for the planets
        static Planet sun = new Planet();
        static ArrayList planets = new ArrayList();
        
        // Default viewport
        int view = SIDE;

        bool pause = false;
        // Reference value to help with dimensioning and scaling
        double refval;

        // An array to hold our texture identifiers generated by OpenGL
        int[] textures;
        int[] textures_mini;

        // Time elapsed since the start of the application
        static uint time_elapsed = 0;
        int m_X, m_Y;
        double zoom_factor = INITIAL_ZOOM;

        // Viewer eye position
        int e_X = INITIAL_X, e_Y = INITIAL_Y, e_Z = INITIAL_Z;

        Timer timer;

        public WinHoved()
        {
            // Initialize the opengl control and register event handlers
            this.Tick += new TickEventHandler(WinHoved_Tick);

            Planet.parseXML(XMLFILE, planets, sun);
            
            refval = 2 * sun.Diameter;

            InitializeComponent();
            simpleOpenGlControl.MouseWheel += new System.Windows.Forms.MouseEventHandler(this.Form_MouseWheel);
            simpleOpenGlControl.MouseUp += new System.Windows.Forms.MouseEventHandler(this.Form_MouseUp);
            simpleOpenGlControl.MouseDown += new System.Windows.Forms.MouseEventHandler(this.Form_MouseDown);
            simpleOpenGlControl.MouseMove += new System.Windows.Forms.MouseEventHandler(this.Form_MouseMove);
            simpleOpenGlControl.KeyUp += new System.Windows.Forms.KeyEventHandler(this.HandleKeyPress);
            
            simpleOpenGlControl.InitializeContexts();
            simpleOpenGlControlMini.InitializeContexts();

            // Initialize the main scene
            simpleOpenGlControl.MakeCurrent();
            InitScene();

            textures = new int[planets.Count+1];
            Gl.glGenTextures(planets.Count + 1, textures);

            loadTexture(sun.Texture, 0);
            for (int i = 1; i < planets.Count+1; i++)
            {
                Planet p = (Planet)planets[i-1];
                loadTexture(p.Texture, i);
                comboBoxPlanet.Items.Add(p);
            }

            SetView(simpleOpenGlControl.Height, simpleOpenGlControl.Width);
            comboBoxPlanet.SelectedIndex = 0;
            comboBoxView.SelectedIndex = TOP;

            // Initialize the textures for the mini view
            simpleOpenGlControlMini.MakeCurrent();
            InitPlanet();

            textures_mini = new int[planets.Count + 1];
            Gl.glGenTextures(planets.Count + 1, textures_mini);

            loadTexture(sun.Texture, 0);
            for (int i = 1; i < planets.Count + 1; i++)
            {
                Planet p = (Planet)planets[i - 1];
                loadTexture(p.Texture, i);
            }

            // Initialize and start the timer
            timer = new Timer();
            timer.Interval = 1000 / trackBar1.Value;
            timer.Tick += new EventHandler(OnTickEvent);
            timer.Start();
        }

        public delegate void TickEventHandler(object sender, EventArgs e);
        
        public event TickEventHandler Tick;

        protected virtual void OnTickEvent(Object sender, EventArgs e)
        {
            if (Tick != null) Tick(this, e);
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);
            SetView(simpleOpenGlControl.Height, simpleOpenGlControl.Width);
        }

        private void SetView(int height, int width)
        {
            Gl.glViewport(0, 0, width, height);
            Gl.glMatrixMode(Gl.GL_PROJECTION);
            Gl.glLoadIdentity();

            int n = (int)(5 * refval * zoom_factor);

            switch (comboBoxView.SelectedIndex)
            {

                case SIDE:
                    Gl.glOrtho(-n, n, -n, n, -n*10, n*10);
                    break;
                default:
                    Gl.glOrtho(-n, n, -n, n, -n, n);
                    break;
            }
            
            Gl.glMatrixMode(Gl.GL_MODELVIEW);
            Gl.glLoadIdentity();
        }

        private void InitScene()
        {
            simpleOpenGlControl.MakeCurrent();
            Gl.glShadeModel(Gl.GL_SMOOTH);
            Gl.glTexEnvf(Gl.GL_TEXTURE_2D, Gl.GL_TEXTURE_ENV_MODE, Gl.GL_MODULATE);
            Gl.glEnable(Gl.GL_DEPTH_TEST);
        }

        private void InitPlanet()
        {
            simpleOpenGlControlMini.MakeCurrent();
            Gl.glShadeModel(Gl.GL_SMOOTH);
            Gl.glTexEnvf(Gl.GL_TEXTURE_2D, Gl.GL_TEXTURE_ENV_MODE, Gl.GL_DECAL);
            Gl.glMatrixMode(Gl.GL_PROJECTION);
            Gl.glLoadIdentity();
            Gl.glOrtho(-10, 10, -10, 10, -10, 10);
            Gl.glMatrixMode(Gl.GL_MODELVIEW);
        }

        private void RenderScene()
        {
            Gl.glClear(Gl.GL_COLOR_BUFFER_BIT | Gl.GL_DEPTH_BUFFER_BIT);
            Gl.glMatrixMode(Gl.GL_MODELVIEW);

            if (checkBox1.Checked)
                Gl.glEnable(Gl.GL_LIGHTING);
            else
                Gl.glDisable(Gl.GL_LIGHTING);

            Gl.glLoadIdentity();
            
            switch (comboBoxView.SelectedIndex)
            {
                case SIDE:
                    Glu.gluLookAt(e_X, -(refval * zoom_factor), e_Z, e_X, 0.0, e_Z, 0.0, 0.0, 1.0);
                    break;
                case TOP:
                    Glu.gluLookAt(e_X, e_Y, refval * zoom_factor, e_X, e_Y, 0.0, 0.0, 1.0, 0.0);
                    break;
                default:
                    Glu.gluLookAt(refval * zoom_factor, refval * zoom_factor, refval * zoom_factor, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
                    break;
            }

            Gl.glDisable(Gl.GL_LIGHTING);
            
            if(checkBoxAxis.Checked)
                DrawAxes();
            if(checkBoxPlane.Checked)
                DrawReferencePlane();

            Gl.glEnable(Gl.GL_LIGHT0);
            Gl.glPushAttrib(Gl.GL_ALL_ATTRIB_BITS);

                float[] light_pos = { 0.0f, 0.0f, 0.0f, 1.0f };
                float[] light_Ka = { 0.0f, 0.0f, 0.0f, 1.0f };
                Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_POSITION, light_pos);
                Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_AMBIENT, light_Ka);

                float[] amb_light = { 0.1f, 0.1f, 0.1f, 1.0f };
                Gl.glLightModelfv( Gl.GL_LIGHT_MODEL_AMBIENT, amb_light );

                float[] sun_emission = { 1.0f, 1.0f, 0.0f, 1.0f };
                Gl.glMaterialfv( Gl.GL_FRONT, Gl.GL_EMISSION, sun_emission );
            
                Glu.GLUquadric quadric = Glu.gluNewQuadric();
                try
                {
                    Glu.gluQuadricTexture(quadric, Glu.GLU_TRUE);
                    Glu.gluQuadricNormals(quadric, Glu.GLU_SMOOTH);
                    Gl.glBindTexture(Gl.GL_TEXTURE_2D, textures[0]);
                    Gl.glEnable(Gl.GL_TEXTURE_2D);
                    Glu.gluSphere(quadric, sun.Diameter/2.0, 40, 40);
                    Gl.glDisable(Gl.GL_TEXTURE_2D);
                }
                finally
                {
                    Glu.gluDeleteQuadric(quadric);
                }

            Gl.glPopAttrib();

            Gl.glPushAttrib(Gl.GL_ALL_ATTRIB_BITS);
            int t_index = 1;
            foreach (Planet p in planets)
            {
                Gl.glPushMatrix();
                    Glu.GLUquadric quadric_planet = Glu.gluNewQuadric();

                    double rot = p.calculateOrbitRotation(time_elapsed);

                    Gl.glRotated(rot, 0.0, 0.0, 1.0);
                    Gl.glRotated(p.Inclination, 0.0, 1.0, 0.0);
                    Gl.glTranslated((sun.Diameter/2.0) + (p.Diameter/2.0) + p.Orbit/2000.0, 0.0, 0.0);
                    Gl.glRotated(-p.calculateAxisRotation(time_elapsed), 0.0, 0.0, 1.0);
                    Gl.glRotated(p.AxialTilt, 0.0, 1.0, 0.0);
                    
                    Gl.glPushMatrix();
                        Gl.glLoadIdentity();
                        float[] light_pos2 = { 0.0f, 0.0f, 0.0f, 1.0f };
                        Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_POSITION, light_pos2);
                    Gl.glPopMatrix();

                    if (checkBox1.Checked)
                        Gl.glEnable(Gl.GL_LIGHTING);
                    else
                        Gl.glDisable(Gl.GL_LIGHTING);
                     
                    try
                    {
                        Glu.gluQuadricNormals(quadric_planet, Glu.GLU_SMOOTH);
                        Glu.gluQuadricTexture(quadric_planet, Glu.GLU_TRUE);
                        Gl.glBindTexture(Gl.GL_TEXTURE_2D, textures[t_index++]);
                        Gl.glEnable(Gl.GL_TEXTURE_2D);
                        Glu.gluSphere(quadric_planet, (p.Diameter/2.0f), 40, 40);
                        Gl.glDisable(Gl.GL_TEXTURE_2D);
                    }
                    finally
                    {
                        Glu.gluDeleteQuadric(quadric_planet);
                    }

                    // Draw the moons
                    foreach (Planet m in p.moons)
                    {
                        Gl.glPushMatrix();
                        Gl.glRotated(m.calculateOrbitRotation(time_elapsed), 0.0, 0.0, 1.0);
                        Gl.glTranslated((p.Diameter / 2.0) + (m.Diameter / 2.0) + m.Orbit / 2000.0, 0.0, 0.0);
                        Glu.GLUquadric quadric_moon = Glu.gluNewQuadric();
                        try
                        {
                            Glu.gluQuadricNormals(quadric_moon, Glu.GLU_SMOOTH);
                            Glu.gluSphere(quadric_moon, (m.Diameter / 2.0f), 40, 40);
                        }
                        finally
                        {
                            Glu.gluDeleteQuadric(quadric_moon);
                        }
                        Gl.glPopMatrix();
                    } 

                Gl.glPopMatrix();
            }
            Gl.glFlush();
        }

        private void RenderPlanet()
        {
            simpleOpenGlControlMini.MakeCurrent();
            Gl.glLoadIdentity();
            Gl.glClear(Gl.GL_COLOR_BUFFER_BIT | Gl.GL_DEPTH_BUFFER_BIT);
            Glu.gluLookAt(1, 1, 1, 0, 0, 0, 0, 0, 1);
            Glu.GLUquadric quadric = Glu.gluNewQuadric();
            try
            {
                Glu.gluQuadricNormals(quadric, Glu.GLU_SMOOTH);
                Glu.gluQuadricTexture(quadric, Glu.GLU_TRUE);
                Gl.glBindTexture(Gl.GL_TEXTURE_2D, textures_mini[comboBoxPlanet.SelectedIndex+1]);
                Gl.glEnable(Gl.GL_TEXTURE_2D);
                Glu.gluSphere(quadric, 8, 40, 40);
                Gl.glDisable(Gl.GL_TEXTURE_2D);

            }
            finally
            {
                Glu.gluDeleteQuadric(quadric);
            }
            Gl.glPopMatrix();
        }

        private void DrawReferencePlane()
        {
            Gl.glPushAttrib(Gl.GL_ALL_ATTRIB_BITS);
            Gl.glPushMatrix();
            Gl.glColor3f(0.5f, 0.5f, 0.5f);
            const float n = 10000000.0f;
            Gl.glBegin(Gl.GL_POLYGON);
                Gl.glVertex3f(n, -n, 0.0f);
                Gl.glVertex3f(-n, -n, 0.0f);
                Gl.glVertex3f(-n, n, 0.0f);
                Gl.glVertex3f(n, n, 0.0f);
            Gl.glEnd();
            Gl.glPopMatrix();
            Gl.glPopAttrib();
        }

        private void DrawAxes()
        {
            Gl.glPushAttrib(Gl.GL_ALL_ATTRIB_BITS);
            Gl.glPushMatrix();
            const float axisSize = 10000000000.0f;

            // draw a line along the z-axis
            Gl.glColor3f(0.0f, 0.0f, 1.0f);
            Gl.glBegin(Gl.GL_LINES);
                Gl.glVertex3f(0.0f, 0.0f, 0.0f);
                Gl.glVertex3f(0.0f, 0.0f, axisSize);
            Gl.glEnd();
            
            // draw a line along the y-axis
            Gl.glColor3f(0.0f, 1.0f, 0.0f);
            Gl.glBegin(Gl.GL_LINES);
            Gl.glVertex3f(0.0f, 0.0f, 0.0f);
                Gl.glVertex3f(0.0f, axisSize, 0.0f);
            Gl.glEnd();

            // draw a line along the x-axis
            Gl.glColor3f(1.0f, 0.0f, 0.0f);
            Gl.glBegin(Gl.GL_LINES);
            Gl.glVertex3f(0.0f, 0.0f, 0.0f);
                Gl.glVertex3f(axisSize, 0.0f, 0.0f);
            Gl.glEnd();
            
            Gl.glPopMatrix();
            Gl.glPopAttrib();
        }

        private void Form_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                e_X += (e.X - m_X) * (PAN_STEP/5);
                e_Y += -(e.Y - m_Y) * (PAN_STEP/5);
                simpleOpenGlControl.Invalidate();
            }
        }

        private void Form_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
        {
        }

        private void Form_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            m_X = e.X;
            m_Y = e.Y;
        }

        private void Form_MouseWheel(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (e.Delta < 0)
            {
                zoomOut();
            } else {
                zoomIn();
            }

        }

        private void WinHoved_Tick(object sender, EventArgs e)
        {
            time_elapsed+=5;
            simpleOpenGlControl.Invalidate();
        }

        private void zoomOut()
        {
                zoom_factor *= 1.04;
                SetView(simpleOpenGlControl.Height, simpleOpenGlControl.Width);
                simpleOpenGlControl.Invalidate();
        }

        private void zoomIn()
        {
            if (zoom_factor > 0.0001)
            {
                zoom_factor *= 0.96;
                SetView(simpleOpenGlControl.Height, simpleOpenGlControl.Width);
                simpleOpenGlControl.Invalidate();
            }
        }

        private void zoomReset()
        {
            zoom_factor = INITIAL_ZOOM;
            SetView(simpleOpenGlControl.Height, simpleOpenGlControl.Width);
            simpleOpenGlControl.Invalidate();
        }

        private void moveDown()
        {
            switch (view)
            {
                case TOP:
                    e_Y -= (int)(PAN_STEP * zoom_factor * 10);
                    break;
                case SIDE:
                    e_Z -= (int)(PAN_STEP * zoom_factor * 10);
                    break;
            }
            simpleOpenGlControl.Invalidate();
        }

        private void moveUp()
        {
            switch (view)
            {
                case TOP:
                    e_Y += (int)(PAN_STEP * zoom_factor * 10);
                    break;
                case SIDE:
                    e_Z += (int)(PAN_STEP * zoom_factor * 10);
                    break;
            }
            simpleOpenGlControl.Invalidate();
        }

        private void moveLeft()
        {
            e_X -= (int)(PAN_STEP*zoom_factor*10);
            simpleOpenGlControl.Invalidate();
        }

        private void moveRight()
        {
            e_X += (int)(PAN_STEP * zoom_factor * 10);
            simpleOpenGlControl.Invalidate();
        }

        private void loadTexture(String t, int index)
        {
            String s = "textures/" + t;
            Bitmap bitmap = new Bitmap(s);
            
            Gl.glBindTexture(Gl.GL_TEXTURE_2D, textures[index]);
            BitmapData data = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
            Glu.gluBuild2DMipmaps(Gl.GL_TEXTURE_2D, Gl.GL_RGBA, bitmap.Width, bitmap.Height, Gl.GL_BGRA, Gl.GL_UNSIGNED_BYTE, data.Scan0);
            bitmap.UnlockBits(data);
        }

        private void btn_up_Click(object sender, EventArgs e)
        {
            moveUp();
        }

        private void btn_down_Click(object sender, EventArgs e)
        {
            moveDown();
        }

        private void btn_left_Click(object sender, EventArgs e)
        {
            moveLeft();
        }

        private void btn_right_Click(object sender, EventArgs e)
        {
            moveRight();
        }

        private void btn_ctr_Click(object sender, EventArgs e)
        {
            e_X = INITIAL_X;
            e_Y = INITIAL_Y;
            e_Z = INITIAL_Z;
            simpleOpenGlControl.Invalidate();
        }

        private void btn_zoomin_Click(object sender, EventArgs e)
        {
            zoomIn();
        }

        private void btn_zoomout_Click(object sender, EventArgs e)
        {
            zoomOut();
        }

        private void btn_zoomreset_Click(object sender, EventArgs e)
        {
            zoomReset();
        }

        private void comboBoxView_SelectedIndexChanged(object sender, EventArgs e)
        {
            view = comboBoxView.SelectedIndex;
            simpleOpenGlControl.Invalidate();
        }

        private void comboBoxPlanet_SelectedIndexChanged(object sender, EventArgs e)
        {
            propertyGridPlanet.SelectedObject = comboBoxPlanet.SelectedItem;
            simpleOpenGlControlMini.Invalidate();
        }

        private void btn_pause_Click(object sender, EventArgs e)
        {

            if (pause)
            {
                timer.Start();
                pause = false;
                btn_pause.Text = "Pause Animation";
            }
            else
            {
                timer.Stop();
                pause = true;
                btn_pause.Text = "Start animation";
            }
             
        }

        private void simpleOpenGlControl_Paint(object sender, PaintEventArgs e)
        {
            RenderScene();
        }

        private void HandleKeyPress(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Left: moveLeft();
                    break;
                case Keys.Right: moveRight();
                    break;
                case Keys.Up: moveUp();
                    break;
                case Keys.Down: moveDown();
                    break;
            }
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            timer.Interval = 1000 / trackBar1.Value;
        }

        private void simpleOpenGlControl1_Paint(object sender, PaintEventArgs e)
        {
            RenderPlanet();
        }
    }
}
